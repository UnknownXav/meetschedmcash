rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Common function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Rules for users collection
    match /users/{userId} {
      allow read: if isAuthenticated(); // Allow authenticated users to read their own user data
      allow write: if request.auth.uid == userId; // Allow users to write to their own document
    }

    // Rules for clients collection
    match /clients/{clientId} {
      allow read, write: if isAuthenticated();
    }

    // Rules for meetings collection
    match /meetings/{meetingId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() 
        && request.resource.data.keys().hasAll(['status', 'meetingDate', 'meetingTime'])
        && request.resource.data.diff(resource.data).affectedKeys()
            .hasAny(['status', 'meetingDate', 'meetingTime']);
      allow delete: if isAuthenticated();
    }

    // Rules for forwarded companies collection
    match /forwardedCompanies/{companyId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() 
        && request.resource.data.keys().hasAll(['companyName', 'timestamp']);
      allow delete: if isAuthenticated();
    }
  }
}